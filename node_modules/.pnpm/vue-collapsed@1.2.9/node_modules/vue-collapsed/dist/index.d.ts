import { AllowedComponentProps } from 'vue';
import { Component } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PropType } from 'vue';
import { VNodeProps } from 'vue';

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare const Collapse: __VLS_WithTemplateSlots<DefineComponent<{
    when: {
        type: PropType<boolean>;
        required: true;
    };
    baseHeight: {
        type: PropType<number>;
        default: number;
    };
    as: {
        type: PropType<keyof HTMLElementTagNameMap>;
        default: string;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    collapse: () => void;
    expand: () => void;
    collapsed: () => void;
    expanded: () => void;
}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    when: {
        type: PropType<boolean>;
        required: true;
    };
    baseHeight: {
        type: PropType<number>;
        default: number;
    };
    as: {
        type: PropType<keyof HTMLElementTagNameMap>;
        default: string;
    };
}>> & {
    onCollapse?: (() => any) | undefined;
    onExpanded?: (() => any) | undefined;
    onCollapsed?: (() => any) | undefined;
    onExpand?: (() => any) | undefined;
}, {
    baseHeight: number;
    as: keyof HTMLElementTagNameMap;
}, {}>, Readonly<{
    default({ state }: {
        state: TransitionState;
    }): Component;
}>>;

declare type TransitionState = 'expanding' | 'expanded' | 'collapsing' | 'collapsed';

export { }
